# coding=utf-8
from pynginxconfig import NginxConfig
import os
import commands


class NginxConf(NginxConfig):
    read_conf = ""

    def __init__(self, nginx_dir, offset_char=' '):
        NginxConfig.__init__(self, offset_char=' ')
        self.nginx_dir = nginx_dir
        nginx_conf = os.path.join(nginx_dir, 'nginx.conf')
        self.format_data(nginx_conf)

    def get_read(self,nginx_conf):
        if os.path.exists(nginx_conf):
            with open(nginx_conf) as fs:
                f = fs.readlines()
                for line in f:
                    if "include" in line and "conf" in line and not '#' in line:
                        fp = line.split()[1].strip(';')
                        if fp.endswith("*.conf"):
                            if fp.startswith("/"):
                                if "/conf/" in fp:
                                    fp_dir = os.path.join(self.nginxdir, fp.split("/conf/")[-1].split("*.")[0])
                                    if os.path.exists(fp_dir):
                                        for i in os.listdir(fp_dir):
                                            if i.endswith(".conf"):
                                                fp_path = os.path.join(fp_dir, i)
                                                self.get_read(fp_path)
                            else:     
                                fp_dir = os.path.join(self.nginx_dir, fp.split("/")[0])
                                if os.path.exists(fp_dir):
                                    for i in os.listdir(fp_dir):
                                        if i.endswith(".conf"):
                                            fp_path = os.path.join(fp_dir, i)
                                            self.get_read(fp_path)
                        else:
                            if fp.startswith("/"):
                                fp_conf = fp.split("/")[-1]
                                fp_path = os.path.join(self.nginx_dir, fp_conf)
                                self.get_read(fp_path)
                            else:
                                fp = os.path.join(self.nginx_dir, fp)
                                self.get_read(fp)
                    else:
                        self.read_conf = self.read_conf + line


    def format_data(self,nginx_conf):
        ss = []
        ul = []
        self.get_read(nginx_conf)
        if self.read_conf:
            self.read_conf.replace("\t", " ")
            self.load(self.read_conf)
            format_start = self.get_value(self.get(('http',)))
            for line in format_start:
                sd = {}
                local_list = []
                if isinstance(line, dict):
                    if line['name'] == 'server':
                        server_value = line['value']
                        for s in server_value:
                            if 'server_name' in s:
                                sd['server_name'] = s[1]
                            elif 'listen' in s:
                                sd['port'] = s[1]
                            elif 'rewrite' in s:
                                sd['rewrite'] = s[1]
                            elif 'location' in str(s):
                                temp_dict = {}
                                temp_pass = s['value']
                                for t in temp_pass:
                                    if 'proxy_pass' in t:
                                        temp_dict['name'] = s['param']
                                        temp_dict['proxy_pass'] = t[1]
                                    else:
                                        temp_dict['name'] = s['param']
                                        temp_dict['config'] = s['value']
                                if temp_dict:
                                    local_list.append(temp_dict)
                        if local_list:
                            sd['location'] = local_list
                        ss.append(sd)
                    elif line['name'] == 'upstream':
                        temp_udict = {}
                        temp_udict['name'] = line['param']
                        temp_udict['server'] = line['value']
                        if temp_udict:
                            ul.append(temp_udict)
        print ss
        print ul
        if ul:
            self.to_db(ss,ul)

    def to_db(self,ss,ul):
        pass

if __name__ == '__main__':
    
    nginxpidcmd = "ps aux|grep -v grep|grep nginx|grep master|awk '{print $2}'"
    st, nginx_pid = commands.getstatusoutput(nginxpidcmd)
    if st == 0 and nginx_pid:
        nginx_cmd = "sudo ls -l /proc/%s|grep ^l|grep exe|awk '{print $NF}'" % nginx_pid
        stat, nginx_path = commands.getstatusoutput(nginx_cmd)
        if stat == 0 and nginx_path:
            nginx_sbin_dir = os.path.dirname(nginx_path)
            nginx_dir = os.path.dirname(nginx_sbin_dir)
            # nginx_dir_conf = nginx_dir + '/conf'
            nginx_dir_conf = os.path.join(nginx_dir, 'conf')
            a = NginxConf(nginx_dir_conf)
        else:
            print {'error': 0}
    else:
        print {'error': 0}
    
    
    
# a = NginxConf('/opt/config_file/2017-03-23_1/10.202.123.11/2017-03-23/nginx/conf')

