#!/usr/local/bin/python
# -*- coding: utf-8 -*-
# app node
# output json {'status':1 ,'tomcat':tomcat, 'netty':netty}
# status=1 OK  status=0 failure


import os, subprocess, re, commands, sys, socket
from datetime import datetime, timedelta


class NginxConfig:
    def __init__(self, offset_char=' '):
        self.i = 0 # char iterator for parsing
        self.length = 0
        self.config = ''
        self.data = []
        self.off_char = offset_char

    def __getitem__(self, index):
        return self.data[index]

    def __setitem__(self, index, value):
        self.data[index] = value

    def __delitem__(self, index):
        del self.data[index]

    def __call__(self):
        return self.gen_config()

    def get_value(self, data):
        if isinstance(data, tuple):
            return data[1]
        elif isinstance(data, dict):
            return data['value']
        else:
            return data

    def get_name(self, data):
        if isinstance(data, tuple):
            return data[0]
        elif isinstance(data, dict):
            return data['name']
        else:
            return data

    def set(self, item_arr, value=None, param=None, name=None):
        if isinstance(item_arr, str):
            elem = item_arr
            parent = self.data
        elif isinstance(item_arr, list) and len(item_arr) == 1:
            elem = item_arr[0]
            parent = self.data
        else:
            elem = item_arr.pop()
            parent = self.get_value(self.get(item_arr))

        if parent is None:
            raise KeyError('No such block.')

        if isinstance(elem, str) and isinstance(value, str):
            #modifying text parameter
            for i, param in enumerate(parent):
                if isinstance(param, tuple):
                    if param[0] == elem:
                        if value is not None and name is not None:
                            parent[i] = (name, value)
                            return
                        elif value is not None:
                            parent[i] = (param[0], value)
                            return
                        elif name is not None:
                            parent[i] = (name, param[1])
                            return
                        raise TypeError('Not expected value type')

        elif isinstance(elem, tuple):
            #modifying block
            if len(elem) == 1:
                elem = (elem[0], '')
            for i, block in enumerate(parent):
                if isinstance(block, dict):
                    if elem == (block['name'], block['param']):
                        if value is not None and isinstance(value, list):
                            parent[i]['value'] = value
                            return
                        if param is not None and isinstance(param, str):
                            parent[i]['param'] = param
                            return
                        if name is not None and isinstance(name, str):
                            parent[i]['name'] = name
                            return
                        raise TypeError('Not expected value type')
        raise KeyError('No such parameter.')

    def get(self, item_arr, data=[]):
        if data == []:
            data = self.data
        if type(item_arr) in [str, tuple]:
            item = item_arr
        elif isinstance(item_arr, list):
            if len(item_arr) == 1:
                item = item_arr[0]
            else:
                element = item_arr.pop(0)
                if isinstance(element, tuple):#cannot be a string
                    if len(element) == 1:
                        element = (element[0], '')
                    for i, data_elem in enumerate(data):
                        if isinstance(data_elem, dict):
                            if (data_elem['name'], data_elem['param']) == element:
                                return self.get(item_arr, self.get_value(data[i]))

        if not 'item' in locals():
            raise KeyError('Error while getting parameter.')
        if isinstance(item, str):
            for i, elem in enumerate(data):
                if isinstance(elem, tuple):
                    if elem[0] == item:
                        return data[i]
        elif isinstance(item, tuple):
            if len(item) == 1:
                item = (item[0], '')
            for i, elem in enumerate(data):
                if isinstance(elem, dict):
                    if (elem['name'], elem['param']) == item:
                        return data[i]
        return None

    def append(self, item, root=[], position=None):
        if root == []:
            root = self.data
        elif root is None:
            raise AttributeError('Root element is None')
        if position:
            root.insert(position, item)
        else:
            root.append(item)

    def remove(self, item_arr, data=[]):
        if data == []:
            data = self.data
        if type(item_arr) in [str, tuple]:
            item = item_arr
        elif isinstance(item_arr, list):
            if len(item_arr) == 1:
                item = item_arr[0]
            else:
                elem = item_arr.pop(0)
                if type(elem) in [tuple,str]:
                    self.remove(item_arr, self.get_value(self.get(elem, data)))
                    return

        if isinstance(item, str):
            for i,elem in enumerate(data):
                if isinstance(elem, tuple):
                    if elem[0] == item:
                        del data[i]
                        return
        elif isinstance(item, tuple):
            if len(item) == 1:
                item = (item[0], '')
            for i,elem in enumerate(data):
                if isinstance(elem, dict):
                    if (elem['name'], elem['param']) == item:
                        del data[i]
                        return
        else:
            raise AttributeError("Unknown item type '%s' in item_arr" % item.__class__.__name__)
        raise KeyError('Unable to remove')

    def load(self, config):
        self.config = config
        self.length = len(config) - 1
        self.i = 0
        self.data = self.parse_block()

    def loadf(self, filename):
        with open(filename, 'r') as f:
            conf = f.read()
            self.load(conf)

    def savef(self, filename):
        with open(filename, 'w') as f:
            conf = self.gen_config()
            f.write(conf)

    def parse_block(self):
        data = []
        param_name = None
        param_value = None
        buf = ''
        while self.i < self.length:
            if self.config[self.i] == '\n': #multiline value
                if buf and param_name:
                    if param_value is None:
                        param_value = []
                    param_value.append(buf.strip())
                    buf = ''
            elif self.config[self.i] == ' ':
                if not param_name and len(buf.strip()) > 0:
                    param_name = buf.strip()
                    buf = ''
                else:
                    buf += self.config[self.i]
            elif self.config[self.i] == ';':
                if isinstance(param_value, list):
                    param_value.append(buf.strip())
                else:
                    param_value = buf.strip()
                if param_name:
                    data.append((param_name, param_value))
                else:
                    data.append((param_value,))
                param_name = None
                param_value = None
                buf = ''
            elif self.config[self.i] == '{':
                self.i += 1
                block = self.parse_block()
                data.append({'name':param_name, 'param':buf.strip(), 'value':block})
                param_name = None
                param_value = None
                buf = ''
            elif self.config[self.i] == '}':
                self.i += 1
                return data
            elif self.config[self.i] == '#': #skip comments
                while self.i < self.length and self.config[self.i] != '\n':
                    self.i += 1
            else:
                buf += self.config[self.i]
            self.i += 1
        return data

    def gen_block(self, blocks, offset):
        subrez = '' # ready to return string
        block_name = None
        block_param = ''
        for i, block in enumerate(blocks):
            if isinstance(block, tuple):
                if len(block) == 1 and type(block[0]) == str: #single param
                    subrez += self.off_char * offset + '%s;\n' % (block[0])
                elif isinstance(block[1], str):
                    subrez += self.off_char * offset + '%s %s;\n' % (block[0], block[1])
                else: #multiline
                    subrez += self.off_char * offset + '%s %s;\n' % (block[0],
                        self.gen_block(block[1], offset + len(block[0]) + 1))

            elif isinstance(block, dict):
                block_value = self.gen_block(block['value'], offset + 4)
                if block['param']:
                    param = block['param'] + ' '
                else:
                    param = ''
                if subrez != '':
                    subrez += '\n'
                subrez += '%(offset)s%(name)s %(param)s{\n%(data)s%(offset)s}\n' % {
                    'offset':self.off_char * offset, 'name':block['name'], 'data':block_value,
                    'param':param}

            elif isinstance(block, str): #multiline params
                if i == 0:
                    subrez += '%s\n' % block
                else:
                    subrez += '%s%s\n' % (self.off_char * offset, block)

        if block_name:
            return '%(offset)s%(name)s %(param)s{\n%(data)s%(offset)s}\n' % {
                'offset':self.off_char * offset, 'name':block_name, 'data':subrez,
                'param':block_param}
        else:
            return subrez

    def gen_config(self, offset_char=' '):
        self.off_char = offset_char
        return self.gen_block(self.data, 0)


#读取应用配置文件
class AppNode(object):

    def __init__(self):
        self.file_path = '/opt/app/appPorts.properties'
        self.str_rule = re.compile(' +')
        self.port = re.compile(':+')
        self.readfile()

    def readfile(self):
        if os.path.isfile(self.file_path):
            f = open(self.file_path, 'r')
            file_list = f.readlines()
            if file_list:
                netty_dict = {}
                tomcat_dict = {}
                for i in file_list:
                    one_line = i.strip()
                    if '#' not in one_line or 'mongodb' not in one_line or 'nxstatus' not in one_line or 'nginxstatus=' not in one_line or 'redis-server=' not in one_line or 'mysqld=' not in one_line:
                        if '-start=' in one_line:
                            appname = one_line.split('-start=')
                            if not netty_dict.has_key(appname[0]):
                                netty_dict[appname[0]] = {}
                            netty_dict[appname[0]]['start'] = appname[1]
                        elif '-stop=' in one_line:
                            appname = one_line.split('-stop=')
                            if not netty_dict.has_key(appname[0]):
                                netty_dict[appname[0]] = {}
                            netty_dict[appname[0]]['stop'] = appname[1]
                        else:
                            appname = one_line.split('=')
                            if not tomcat_dict.has_key(appname[0]):
                                tomcat_dict[appname[0]] = {'stop':0}
                            tomcat_dict[appname[0]]['start'] = appname[1]
                process_info = self.readprocess('ps -ef |grep java|grep -v grep')
                for i in process_info:
                    process = re.split(self.str_rule, i)
                    pid = int(process[1])
                    parameter = ''
                    if 'spring.profiles.active' in i:
                        for sp in process:
                            if 'spring.profiles.active' in sp:
                                parameter = sp.split('=')[1]
                        app_type = 'spring'
                    elif 'apache-tomcat-' in i:
                        app_type = 'tomcat'
                    else:
                        app_type = 'netty'
                    if 'apache-tomcat' in i or 'server.port' in i:
                        for tomcat in tomcat_dict:
                            port = tomcat_dict[tomcat]['start']
                            if '/apache-tomcat-%s/' % port in i or ' --server.port=%s' % port in i:
                                tomcat_dict[tomcat]['pid'] = pid
                                tomcat_dict[tomcat]['app_type'] = app_type
                                tomcat_dict[tomcat]['spring_name'] = parameter
                                tomcat_dict[tomcat]['connection_number'] = []
                    else:
                        for netty in netty_dict:
                            if netty in i and netty_dict[netty]['start'] in i:
                                netty_dict[netty]['pid'] = pid
                                netty_dict[netty]['app_type'] = app_type
                                netty_dict[netty]['spring_name'] = parameter
                                netty_dict[netty]['connection_number'] = []
                if netty_dict or tomcat_dict:
                    print({'netty':netty_dict, 'tomcat':tomcat_dict})
            else:
                print {}
        else:
            print {}

    def readprocess(self, command):
        '''抓取进程'''
        p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
        out, err = p.communicate()
        process_info = out.splitlines()
        return process_info


#读取nginx配置文件
class NginxConf(NginxConfig):
    read_conf = ""

    def __init__(self, offset_char=' '):
        NginxConfig.__init__(self, offset_char=' ')
        self.nginx_path()

    def nginx_path(self):
        nginxpidcmd = "ps aux|grep -v grep|grep nginx|grep master|awk '{print $2}'"
        st, nginx_pid = commands.getstatusoutput(nginxpidcmd)
        if st == 0 and nginx_pid:
            nginx_cmd = "sudo ls -l /proc/%s|grep ^l|grep exe|awk '{print $NF}'" % nginx_pid
            stat, nginx_path = commands.getstatusoutput(nginx_cmd)
            if stat == 0 and nginx_path:
                nginx_sbin_dir = os.path.dirname(nginx_path)
                nginx_dir = os.path.dirname(nginx_sbin_dir)
                nginx_dir_conf = os.path.join(nginx_dir, 'conf')
                self.nginx_dir = nginx_dir_conf
                self.format_data('%s/nginx.conf' % nginx_dir_conf)
            else:
                print {'error': 0}
        else:
            print {'error': 0}

    def get_read(self, nginx_conf):
        if os.path.exists(nginx_conf):
            with open(nginx_conf) as fs:
                f = fs.readlines()
                for line in f:
                    if "include" in line and "conf" in line and not '#' in line:
                        fp = line.split()[1].strip(';')
                        if fp.endswith("*.conf"):
                            if fp.startswith("/"):
                                if "/conf/" in fp:
                                    fp_dir = os.path.join(self.nginx_dir, fp.split("/conf/")[-1].split("*.")[0])
                                    if os.path.exists(fp_dir):
                                        for i in os.listdir(fp_dir):
                                            if i.endswith(".conf"):
                                                fp_path = os.path.join(fp_dir, i)
                                                self.get_read(fp_path)
                            else:
                                fp_dir = os.path.join(self.nginx_dir, fp.split("/")[0])
                                if os.path.exists(fp_dir):
                                    for i in os.listdir(fp_dir):
                                        if i.endswith(".conf"):
                                            fp_path = os.path.join(fp_dir, i)
                                            self.get_read(fp_path)
                        else:
                            if fp.startswith("/"):
                                fp_conf = fp.split("/")[-1]
                                fp_path = os.path.join(self.nginx_dir, fp_conf)
                                self.get_read(fp_path)
                            else:
                                fp = os.path.join(self.nginx_dir, fp)
                                self.get_read(fp)
                    else:
                        self.read_conf = self.read_conf + line

    def format_data(self, nginx_conf):
        ss = []
        ul = []
        self.get_read(nginx_conf)
        if self.read_conf:
            self.read_conf = self.read_conf.replace("\t", " ")
            self.read_conf = self.read_conf.replace("server{", "server {")
            self.load(self.read_conf)
            format_start = self.get_value(self.get(('http',)))
            for line in format_start:
                sd = {}
                local_list = []
                if isinstance(line, dict):
                    if line['name'] == 'server':
                        server_value = line['value']
                        for s in server_value:
                            if 'server_name' in s:
                                sd['server_name'] = s[1]
                            elif 'listen' in s:
                                sd['port'] = s[1]
                            elif 'rewrite' in s:
                                sd['rewrite'] = s[1]
                            elif 'set' in s and 'backend' in s[1]:
                                sd['backend'] = s[1].split("'")[1]
                            elif 'location' in str(s):
                                temp_dict = {}
                                temp_pass = s['value']
                                for t in temp_pass:
                                    if 'proxy_pass' in t:
                                        temp_dict['name'] = s['param']
                                        temp_dict['proxy_pass'] = t[1]
                                    elif 'set' in t and 'backend' in t[1]:
                                        sd['backend'] = t[1].split("'")[1]
                                    else:
                                        temp_dict['name'] = s['param']
                                        temp_dict['config'] = s['value']
                                if temp_dict:
                                    local_list.append(temp_dict)
                        if local_list:
                            sd['location'] = local_list
                        ss.append(sd)
                    elif line['name'] == 'upstream':
                        temp_udict = {}
                        temp_udict['name'] = line['param']
                        temp_udict['server'] = line['value']
                        if temp_udict:
                            ul.append(temp_udict)
        print ss


#读取server配置文件
class GetConfPath(object):
    """
    获得如下应用的配置文件路径，结果输出类似于下面:
    {
        'nginx': {'dir':'','file':'','depth':0},
        'zabbix': {'dir':'','file':'','depth':0},
        'varnish': {'dir':'','file':'','depth':0},
        'sysctl': {'dir':'','file':'','depth':0},
        'rsyslog': {'dir':'','file':'','depth':0},
        'dns': {'dir':'','file':'','depth':0},
        'openresty': {'dir':'','file':'','depth':0},
        'sudo': {'dir':'','file':'','depth':0},
        'tomcat':{'param':[{'file': '', 'port': '8089', 'dir': ['/opt/app/apache-tomcat-8089/conf/', '/opt/app/apache-tomcat-8089/bin/'], 'app_name': 'nxstatus'}],'depth':0}

    }
    此脚本主要是用来获得nginx/openresty tomcat varnish(暂不考虑
    """

    d = {
        'sudo': {'dir': '/etc/sudoers.d', 'file': '/etc/sudoers', 'depth': 0},
        'dns': {'dir': '', 'file': '/etc/resolv.conf', 'depth': 0},
        'sysctl': {'dir': '/etc/sysctl.d', 'file': '/etc/sysctl.conf', 'depth': 0},
        'rsyslog': {'file': '/etc/rsyslog.conf', 'dir': '/etc/rsyslog.d/', 'depth': 0},
        'zabbix': {'file': '', 'dir': '/etc/zabbix', 'depth': 0},
        'nginx': {'dir': '', 'file': '', 'depth': 1},
        'openresty': {'dir': '', 'file': '', 'depth': 1},
        'tomcat': {'param': [], 'depth': 0},
        'varnish': {'dir': '/etc/varnish', 'file': '', 'depth': 0},
        'msg': 0
    }
    dd = {
        'sudo': {'dir': '/etc'},
        'dns': {'dir': '/etc'},
        'sysctl': {'dir': '/etc'},
        'rsyslog': {'dir': '/etc'},
        'zabbix': {'dir': '/etc/zabbix'},
        'nginx': {'dir': ''},
        'openresty': {'dir': ''},
        'tomcat': [],
        'varnish': {'dir': '/etc',},
        'msg': 0
    }


    basedir = ""
    OldTime = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
    DateTime = datetime.now().strftime("%Y-%m-%d")

    # _, LocalIP = commands.getstatusoutput("/usr/sbin/ip addr | grep 'inet' | grep -v 'inet6' | awk '{print $2}' | grep -v '127.0.0.1' | awk -F '/' '{print $1}' | head -n 1")

    def __init__(self, configname):
        self.dir_list = ['nginx', 'zabbix', 'varnish', 'sysctl', 'rsyslog', 'dns', 'openresty', 'sudo', 'tomcat']
        myip = sys.argv[1]
        self.configname = configname
        if myip:
            self.LocalIP = myip
        else:
            self.LocalIP = self.get_ip()

    def get_ip(self):
        myname = socket.gethostname()
        myhostip = socket.gethostbyname_ex(myname)
        st = myhostip[2]
        if st:
            for ip in st:
                if ip == "127.0.0.1" or ip.startswith("172") or ip.startswith("192"):
                    continue
                else:
                    return ip

    def get_conf_path(self):
        nginx_dict = {'file': '', 'depth': 1}
        temp_nginx = {}
        tomcat_list = []
        temp_list = []
        if os.path.exists(self.configname):
            with open(self.configname) as f:
                fs = f.readlines()
            for line in fs:
                tomcat_dict = {}
                line = line.strip()
                if line:
                    if line.startswith('#') or "stop" in line or "start" in line or "mongo" in line or "redis" in line:
                        continue
                    if "nginxstatus" in line or "nxstatus" in line:
                        cmd = "ps aux|grep nginx|grep master|grep -v grep"
                        status, strs = commands.getstatusoutput(cmd)
                        if status == 0:
                            nginxpidcmd = "ps aux|grep -v grep|grep nginx|grep master|awk '{print $2}'"
                            st, nginx_pid = commands.getstatusoutput(nginxpidcmd)
                            if st == 0:
                                nginx_cmd = "sudo ls -l /proc/%s|grep ^l|grep exe|awk '{print $NF}'" % nginx_pid
                                stat, nginx_path = commands.getstatusoutput(nginx_cmd)
                                if stat == 0:
                                    nginx_sbin_dir = os.path.dirname(nginx_path)
                                    nginx_dir = os.path.dirname(nginx_sbin_dir)
                                    nginx_dir_conf = nginx_dir + '/conf/'
                                    if os.path.isdir(nginx_dir_conf):
                                        nginx_dict['dir'] = nginx_dir_conf
                                        temp_nginx['dir'] = nginx_dir
                                        if "openresty" in nginx_path:
                                            self.d['openresty'] = nginx_dict
                                            self.dd['openresty'] = temp_nginx
                                        else:
                                            self.d['nginx'] = nginx_dict
                                            self.dd['nginx'] = temp_nginx
                    else:
                        app_name, port = line.split("=")
                        tomcat_name = "apache-tomcat-%s" % port
                        cmd = "ps aux | grep %s" % tomcat_name
                        status, _ = commands.getstatusoutput(cmd)
                        if status == 0:
                            tomcat_dict['port'] = port
                            tomcat_dict['app_name'] = app_name
                            temp_dir = "/opt/app/server/%s" % tomcat_name
                            tomcat_dir = "/opt/app/server/%s/conf/" % tomcat_name
                            tomcat_bin = "/opt/app/server/%s/bin/" % tomcat_name
                            tomcat_dict['dir'] = [tomcat_dir, tomcat_bin]
                            tomcat_dict['file'] = ''
                            tomcat_list.append(tomcat_dict)
                            temp_list.append(temp_dir)
        self.d['tomcat']['param'] = tomcat_list
        self.dd['tomcat'] = temp_list

    def _create_dir(self):
        # self._get_ip()
        if self.LocalIP:
            # 创建之前先清理日期目录
            ipdir = "/home/blsa/%s" % self.LocalIP
            if os.path.exists(ipdir):
                remove_cmd = "rm -rf %s" % ipdir
                os.system(remove_cmd)

            self.basedir = "/home/blsa/%s/%s" % (self.LocalIP, self.DateTime)
            create_basedir = "mkdir -p %s" % self.basedir
            stu, _ = commands.getstatusoutput(create_basedir)
            if stu == 0:
                for d in self.dir_list:
                    dir = os.path.join(self.basedir, d)
                    create_dir_cmd = "mkdir -p %s" % dir
                    s, _ = commands.getstatusoutput(create_dir_cmd)
                return 0
            else:
                # print "主目录%s创建失败，请查检相应的用户的权限是否正确" % self.basedir
                return 1
        else:
            # print "获得IP地址失败,请检查ifconfig命令或ip命令是否存在，或者命令后面的过滤规则有误"
            return 1

    def _cp_file(self):
        for k in self.dir_list:
            if k == "tomcat":
                tomcat_list = self.d[k]['param']
                if tomcat_list:
                    for t in tomcat_list:
                        tomcat_appname = t['app_name']
                        tomcat_port = t['port']
                        tomcat_dir_list = t['dir']
                        tomcat_file = t['file']
                        bak_tomcat = os.path.join(self.basedir, k)
                        appname_dir = tomcat_appname + '_' + tomcat_port
                        bak_appdir = os.path.join(bak_tomcat, appname_dir)
                        # cmd = "mkdir -p %s" % bak_appdir
                        cmd = "mkdir -p %s/bin %s/conf" % (bak_appdir, bak_appdir)
                        st, _ = commands.getstatusoutput(cmd)
                        if st == 0:
                            for dd in tomcat_dir_list:
                                if os.path.exists(dd):
                                    for ff in os.listdir(dd):
                                        tempfile = os.path.join(dd, ff)
                                        if os.path.isfile(tempfile):
                                            if "bin" in tempfile and not tempfile.endswith('.tar.gz') and not tempfile.endswith('.jar'):
                                                cp_cmd = "sudo cp %s %s/bin" % (tempfile, bak_appdir)
                                            elif "conf" in tempfile and not tempfile.endswith('.tar.gz') and not tempfile.endswith('.jar'):
                                                cp_cmd = "sudo cp %s %s/conf" % (tempfile, bak_appdir)
                                            os.system(cp_cmd)
                        if tomcat_file:
                            if os.path.exists(tomcat_file):
                                cp_cmd = "sudo cp %s %s" % (tomcat_file, bak_appdir)
                                os.system(cp_cmd)
            elif k == "sysctl":
                temp_d = self.d[k]
                temp_dir = temp_d['dir']
                temp_file = temp_d['file']
                b_dir = os.path.join(self.basedir, k)
                if temp_dir:
                    if os.path.exists(temp_dir):
                        t_cmd = "sudo cp -r %s %s" % (temp_dir, b_dir)
                        os.system(t_cmd)
                if temp_file:
                    if os.path.exists(temp_file):
                        t_cmd = "sudo cp %s %s" % (temp_file, b_dir)
                        os.system(t_cmd)
                        if os.path.exists('/sbin/sysctl'):
                            tt_cmd = "/sbin/sysctl -a | sort > %s/sysctl_all.conf" % b_dir
                        elif os.path.exists("/usr/sbin/sysctl"):
                            tt_cmd = "/usr/sbin/sysctl -a | sort> %s/sysctl_all.conf" % b_dir
                        else:
                            tt_cmd = "`which sysctl` -a | sort > %s/sysctl_all.conf" % b_dir
                        os.system(tt_cmd)
            elif k == "varnish":
                temp_d = self.d[k]
                temp_dir = temp_d['dir']
                temp_file = temp_d['file']
                b_dir = os.path.join(self.basedir, k)
                if temp_dir:
                    if os.path.exists(temp_dir):
                        t_cmd = "sudo cp -r %s/* %s" % (temp_dir, b_dir)
                        os.system(t_cmd)
                if temp_file:
                    if os.path.exists(temp_file):
                        t_cmd = "sudo cp %s %s" % (temp_file, b_dir)
                        os.system(t_cmd)
            else:
                n_dict = self.d[k]
                n_dir = n_dict['dir']
                n_file = n_dict['file']
                bak_dir = os.path.join(self.basedir, k)
                if n_dir:
                    if os.path.exists(n_dir):
                        cp_cmd = "sudo cp -r %s %s" % (n_dir, bak_dir)
                        os.system(cp_cmd)
                if n_file:
                    if os.path.exists(n_file):
                        cp_cmd = "sudo cp %s %s" % (n_file, bak_dir)
                        os.system(cp_cmd)

    def create_tar(self):
        number = self._create_dir()
        if number == 0:
            self._cp_file()
        chown_cmd = "sudo chown blsa.blsa %s -R" % self.basedir
        os.system(chown_cmd)
        tar_name = "%s_%s.tar.gz" % (self.LocalIP, self.DateTime)
        tar_gzip_cmd = "tar -zcf %s %s" % (tar_name, self.LocalIP)
        st, _ = commands.getstatusoutput(tar_gzip_cmd)
        if st == 0:
            clear_dir = "rm -rf %s" % self.LocalIP
            if os.path.exists(os.path.join("/home/blsa", self.LocalIP)):
                os.system(clear_dir)
            for i in os.listdir("/home/blsa"):
                if self.DateTime not in i and i.endswith(".tar.gz"):
                    oldtar = os.path.join("/home/blsa", i)
                    if oldtar:
                        clean_tar = "rm -f %s" % oldtar
                        os.system(clean_tar)
            self.d["msg"] = 1
            self.dd["msg"] = 1
        else:
            self.d["msg"] = 0
            self.dd["msg"] = 0


#查看端口
class SysPort(object):

    def __init__(self):
        command = "sudo netstat -tlnp | grep tcp | awk '{print $4,$7}' | tr '/' ' '"
        st, port_info = commands.getstatusoutput(command)
        port_dict = {}
        if st == 0 and port_info:
            matching1 = re.compile(' +')
            matching2 = re.compile(':+')
            for i in port_info.split('\n'):
                info_list = re.split(matching1, i)
                portinfo = re.split(matching2, info_list[0])
                if portinfo[1] not in port_dict and len(info_list) == 3:
                    if portinfo[0] == '0.0.0.0' or portinfo[0] == ':::':
                        port_dict[portinfo[1]] = {}
                        port_dict[portinfo[1]]['port_type'] = 1
                    else:
                        port_dict[portinfo[1]] = {}
                        port_dict[portinfo[1]]['port_type'] = 0
                    port_dict[portinfo[1]]['pid'] = info_list[1]
                    port_dict[portinfo[1]]['info'] = info_list[2]
        print port_dict


if __name__ == '__main__':
    configname = '/opt/app/appPorts.properties'
    print '=====app====='
    try:
        AppNode()
    except Exception:
        print {}
    print '=====nginx====='
    try:
        NginxConf()
    except Exception:
        print {}
    print '=====port====='
    try:
        SysPort()
    except Exception:
        print {}
    print '=====config====='
    try:
        get_path = GetConfPath(configname)
        get_path.get_conf_path()
        get_path.create_tar()
        print get_path.dd
    except Exception:
        print {}
